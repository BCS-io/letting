####
#
# Credit
#
# Generated by payments and linked to a debit. The credit offsets
# a debit charged to a property account.
#
#
# A payment is applied to one property account. When being applied
# it finds unpaid debits and generates a matching credit.
# The credits get set during the payments controller #create action.
#
# Credits decrease an accounts balance -.
####
#
class Credit < ApplicationRecord
  include ActAsFakeDeletable
  belongs_to :payment, inverse_of: :credits
  belongs_to :account
  belongs_to :charge, inverse_of: :credits
  delegate :charge_type, to: :charge
  delegate :automatic_payment?, to: :charge
  has_many :debits, through: :settlements
  has_many :settlements, dependent: :destroy

  validates :charge, :at_time, presence: true
  validates :amount, price_bound: true
  after_initialize :init
  before_save :reconcile

  def init
    self.at_time = Time.zone.today if at_time.blank?
  end

  def clear_up
    mark_for_destruction if amount.nil? || amount.round(2).zero?
  end

  # outstanding is the amount left unpaid
  # (credit) amount is normally positive
  # settled starts at 0 and becomes larger until (settled - amount == 0)
  # Outstanding will be initially positive trending to 0
  def outstanding
    amount - settled
  end

  def spent?
    outstanding.round(2).zero?
  end

  # set the time of the credit as the payment time
  #
  def register_booking payment
    self.at_time = payment.booked_at
  end

  scope :total, -> { sum(:amount) }
  scope :until, ->(until_time) { where('? >= at_time', until_time) }

  def self.available charge_id
    where(charge_id: charge_id).order(:at_time).reject(&:spent?)
  end

  def to_s
    "id: #{id || 'nil'}, " \
    "charge_id: #{charge_id || 'nil'}, " \
    "at_time: #{at_time.to_date}+t, " \
    "outstanding: #{outstanding}, " \
    "amount: #{amount}, " +
      charge_to_s
  end

  private

  # Called on save to see if a debit can be matched to a credit
  #
  def reconcile
    Settlement.resolve(outstanding, Debit.available(charge_id)) do |offset, pay|
      settlements.build debit: offset, amount: pay
    end
  end

  def settled
    settlements.pluck(:amount).inject(0, :+)
  end

  def charge_to_s
    if charge
      "charge_type: #{charge_type || 'nil'} " \
      "auto: #{automatic? || 'nil'} "
    else
      'charge: nil'
    end
  end
end
