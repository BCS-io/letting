STDOUT.sync = true

namespace :db do
  namespace :stage do

    desc "Imports lettings data from csv's generated by previous system."
    task :properties do |_task, _args|
      include Logging
      logger.info 'stage'
      if File.exist?('import_data/patch/properties_patch.csv')

        FileUtils.mkdir_p 'import_data/staging/'
        patched = properties.map! do |property|
          matched = property_patches.find do |patch_property|
            property[:human_ref] == patch_property[:human_ref]
          end
          if matched
            matched
          else
            property
          end
        end

        CSV.open 'import_data/staging/staging_properties.csv',
                 'w',
                 write_headers: true,
                 headers: DB::FileHeader.property do |csv_object|
          patched.each do |row_array|
            csv_object << row_array
          end
        end
        logger.info 'complete'
      else
        warn missing_properties_csv_message
      end
    end

    def properties
      DB::CSVTransform.to_a 'properties',
                            headers: DB::FileHeader.property,
                            location: 'import_data/legacy',
                            drop_rows: 34
    end

    # Takes a csv file which corrects mistakes in the properties CSV.
    #
    def property_patches
      DB::CSVTransform.to_a 'properties_patch',
                            headers: DB::FileHeader.property,
                            location: 'import_data/patch'
    end

    def missing_properties_csv_message
      'Warning: properties.csv is missing - a patch cannot be generated'
    end
  end
end