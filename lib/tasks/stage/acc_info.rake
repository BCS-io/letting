STDOUT.sync = true

namespace :db do
  namespace :stage do

    desc "Imports lettings data from csv's generated by previous system."
    task :acc_info do |_task, _args|
      include Logging
      logger.info 'stage'
      if File.exist?('import_data/patch/acc_info_patch.csv')

        FileUtils.mkdir_p 'import_data/staging/'
        patched = acc_infos.map! do |charge|
          matched = acc_info_patches.find do |patch_charge|
            charge[:human_ref] == patch_charge[:human_ref] &&
            charge[:charge_type] == patch_charge[:charge_type]
          end
          if matched
            matched
          else
            charge
          end
        end

        CSV.open 'import_data/staging/staging_acc_info.csv',
                 'w',
                 write_headers: true,
                 headers: DB::FileHeader.charge do |csv_object|
          patched.each do |row_array|
            csv_object << row_array
          end
        end
        logger.info 'complete'
      else
        warn missing_acc_info_csv_message
      end
    end

    def acc_infos
      DB::CSVTransform.to_a 'acc_info',
                            headers: DB::FileHeader.charge,
                            location: 'import_data/legacy'
    end

    def acc_info_patches
      DB::CSVTransform.to_a 'acc_info_patch',
                            headers: DB::FileHeader.charge,
                            location: 'import_data/patch'
    end

    def missing_acc_info_csv_message
      'Warning: acc_info.csv is missing - a patch cannot be generated'
    end
  end
end