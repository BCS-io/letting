STDOUT.sync = true

namespace :db do
  namespace :stage do

    desc "Imports lettings data from csv's generated by previous system."
    task :address2 do |_task, _args|
      include Logging
      logger.info 'stage'
      if File.exist?('import_data/patch/address2_patch.csv')

        FileUtils.mkdir_p 'import_data/staging/'
        patched = address2.map! do |agent|
          matched = address2_patches.find do |patch_agent|
            agent[:human_ref] == patch_agent[:human_ref]
          end
          if matched
            matched
          else
            agent
          end
        end

        CSV.open 'import_data/staging/staging_address2.csv',
                 'w',
                 write_headers: true,
                 headers: DB::FileHeader.client do |csv_object|
          patched.each do |row_array|
            csv_object << row_array
          end
        end
        logger.info 'complete'
      else
        warn missing_address2_csv_message
      end
    end

    def address2
      DB::CSVTransform.to_a 'address2',
                            headers: DB::FileHeader.agent,
                            location: 'import_data/legacy'
    end

    def address2_patches
      DB::CSVTransform.to_a 'address2_patch',
                            headers: DB::FileHeader.agent_patch,
                            location: 'import_data/patch'
    end

    def missing_address2_csv_message
      'Warning: address2.csv is missing - a patch cannot be generated'
    end
  end
end