STDOUT.sync = true

desc "Imports lettings data from csv's generated by previous system."
task :patch_properties do |_task, _args|
  include Logging
  logger.info 'patch'
  if File.exist?('import_data/patch/properties_patch.csv')

    FileUtils.mkdir_p 'import_data/staging/'
    patched = properties_file.map! do |property|
      matched = patch_properties.find do |patch_property|
        property[:human_ref] == patch_property[:human_ref]
      end
      if matched
        matched
      else
        property
      end
    end

    CSV.open 'import_data/staging/staging_properties.csv',
             'w',
             write_headers: true,
             headers: DB::FileHeader.property do |csv_object|
      patched.each do |row_array|
        csv_object << row_array
      end
    end
    logger.info 'complete'
  else
    warn missing_properties_csv_message
  end
end

def properties_file
  DB::FileImport.to_a 'properties',
                      headers: DB::FileHeader.property,
                      location: 'import_data/legacy',
                      drop_rows: 34
end

# Takes a csv file which corrects mistakes in the properties CSV.
#
def patch_properties
  DB::FileImport.to_a 'properties_patch',
                      headers: DB::FileHeader.property,
                      location: 'import_data/patch'
end

def missing_properties_csv_message
  'Warning: properties.csv is missing - a patch cannot be generated'
end
